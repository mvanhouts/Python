Exercise 1: Recursive Query

Write a recursive CTE (Common Table Expression) query to retrieve all the employees and their subordinates in a hierarchical structure.

sql

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    EmployeeName VARCHAR(50),
    ManagerID INT NULL
);

INSERT INTO Employees (EmployeeID, EmployeeName, ManagerID)
VALUES (1, 'John', NULL),
       (2, 'Alice', 1),
       (3, 'Bob', 1),
       (4, 'Charlie', 2),
       (5, 'David', 3),
       (6, 'Emma', 3);

Exercise 2: Pivot Query

Write a T-SQL query to pivot the data and display the total sales amount for each year in separate columns for each quarter.

sql

CREATE TABLE Sales (
    ProductID INT,
    Year INT,
    Quarter INT,
    Amount DECIMAL(10, 2)
);

INSERT INTO Sales (ProductID, Year, Quarter, Amount)
VALUES (1, 2021, 1, 100),
       (1, 2021, 2, 150),
       (1, 2021, 3, 200),
       (1, 2021, 4, 175),
       (2, 2021, 1, 300),
       (2, 2021, 2, 250),
       (2, 2021, 3, 225),
       (2, 2021, 4, 275),
       (1, 2022, 1, 125),
       (1, 2022, 2, 175),
       (1, 2022, 3, 225),
       (1, 2022, 4, 250),
       (2, 2022, 1, 275),
       (2, 2022, 2, 225),
       (2, 2022, 3, 200),
       (2, 2022, 4, 300);

Query:

select * from
(
select [Year], [Quarter], Amount from Sales
) t

pivot(
	sum(Amount)
	for [Year] in (
	[2021],
	[2022]
	)
)
as pivot_table

Exercise 3: Ranking Function

Write a query that retrieves the top 3 products with the highest sales amount for each year. 

sql

CREATE TABLE Sales (
    ProductID INT,
    Year INT,
    Amount DECIMAL(10, 2)
);

INSERT INTO Sales (ProductID, Year, Amount)
VALUES (1, 2021, 1000),
       (2, 2021, 2000),
       (3, 2021, 1500),
       (1, 2022, 1200),
       (2, 2022, 1800),
       (3, 2022, 1300),
       (1, 2023, 900),
       (2, 2023, 2500),
       (3, 2023, 1600);
	   
query
	   
select [Year], ProductID, Total from (
	select [Year], ProductID,sum(Amount) as Total,
	rank() over (
		partition by [Year]
		order by sum(Amount) desc)
		sales_rank
	from Sales
	group by [Year], ProductID
	) t
where sales_rank <= 3

Exercise 4: Window Function

select ProductID, SalesDate, sum(Amount)
over (partition by ProductID order by SalesDate) as RunningSales
from Sales

Write a query to calculate the running total of sales amount for each product, ordered by the sales date. 

sql

CREATE TABLE Sales (
    ProductID INT,
    SalesDate DATE,
    Amount DECIMAL(10, 2)
);

INSERT INTO Sales (ProductID, SalesDate, Amount)
VALUES (1, '2021-01-01', 100),
       (1, '2021-01-15', 150),
       (1, '2021-02-05', 200),
       (1, '2021-02-28', 175),
       (2, '2021-01-10', 300),
       (2, '2021-01-20', 250),
       (2, '2021-02-15', 225),
       (2, '2021-02-28', 275);

Exercise 5: Handling XML Data

Write a query to retrieve the OrderID and the total quantity of each product ordered from the XML data.


query:

select OrderID, ProductID, sum(Quantity) as Total from
(select OrderID,
OrderDetails.value('(/Order/ProductID)[1]', 'int') as ProductID,
OrderDetails.value('(/Order/Quantity)[1]', 'int') as Quantity
from Orders) t
group by OrderID, ProductID

sql

CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    OrderDetails XML
);

INSERT INTO Orders (OrderID, OrderDetails)
VALUES (1, '<Order><ProductID>1</ProductID><Quantity>5</Quantity></Order>'),
       (2, '<Order><ProductID>2</ProductID><Quantity>3</Quantity></Order>'),
       (3, '<Order><ProductID>1</ProductID><Quantity>2</Quantity></Order>'),
       (4, '<Order><ProductID>3</ProductID><Quantity>4</Quantity></Order>');